<template>
    <view>
        <!-- <navigator url="/pages/estate_form"> -->
        <!--     <image src="../images/estate_banner.jpg" mode="widthFix" style="width:100%;display:block;" /> -->
        <!-- </navigator> -->
        <!-- <van-cell icon="location-o" title="{{cities[mainActiveIndex].name}}" clickable value="切换城市" bind:click="onSelectCity" /> -->
        <view style="position:absolute;top:2vw;left:4vw;width:92vw;background-color:white;z-index:99999999;">
            <view style="display:flex;flex-direction:row;padding:16rpx 8rpx;">
                <view style="display:flex;flex:6;justify-content:center;align-items:center;font-size:14px;" @tap="onSelectCity">
                    <van-icon name="location-o" />{{cities[mainActiveIndex].name}}
                </view>
                <view style="display:flex;flex:14;">
                    <input 
                        placeholder="搜索小区/写字楼等"
                        @focus="onFocus"
                        @confirm="onChange"
                        style="font-size:15px;line-height:20px;border:1px solid #ececec;padding:4px 8rpx;backgorund-color:#eee;"
                    />
                </view>
                <view style="display:flex;flex:4;align-items:center;justify-content:center;font-size:16px;" @tap="onCancel">
                   取消
                </view>
            </view>
            <view wx:if="{{showResultPanel}}" style="min-height:70vh">
            <repeat for="{{searched}}" key="index" index="index" item="item">
            <van-cell value="进入" clickable="true" arrow-direction="right" custom-class="estate-cell" center="true" bind:click="onSelectEstateZone({{item.id}})">
                <view slot="title" class="estate-cell__title">
                <view class="van-cell__text">{{item.title.rendered}}</view>
                <van-icon name="passed" color="#ff6a3c" wx:if="{{item.id == currentEstate.id}}" size="14px" custom-class="estate-cell__icon"></van-icon>
                <van-tag wx:if="{{item.disabled}}" type="danger">区长招募中</van-tag>
                </view>
            </van-cell>
            </repeat>
            </view>
        </view>
        <view class="mask" wx:if="{{showResultPanel}}"></view>
        <map id="map" longitude="{{longitude}}" latitude="{{latitude}}" markers="{{markers}}" style="width:100%;height:50vh;" scale="17" @regionchange="onRegionChange" enable-zoom  ></map>
        <repeat for="{{items}}" key="index" index="index" item="item">
            <van-cell value="进入" clickable="true" arrow-direction="right" custom-class="estate-cell" center="true" bind:click="onSelectEstateZone({{item.id}})">
                <view slot="icon">
                    <view class="van-cell__badge">{{index + 1}}</view>
                </view>
                <view slot="title" class="estate-cell__title">
                <view class="van-cell__text">{{item.text}}</view>
                    <van-icon name="passed" color="#ff6a3c" wx:if="{{item.id == currentEstate.id}}" size="14px" custom-class="estate-cell__icon"></van-icon>
                    <van-tag wx:if="{{item.disabled}}" type="danger">区长招募中</van-tag>
                </view>
            </van-cell>
        </repeat>
    </view>
</template>
<script>
import wepy from 'wepy'
import {
  CURRENT_ESTATE,
} from '@/utils/constant';
import QQMapWX from 'qqmap-wx-jssdk';
import tip from '@/utils/tip'
import api from '@/api/api';
import geohash from 'ngeohash';

export default class Estate extends wepy.page {
  config = {
    navigationBarTitleText: '选择小区',
  }
  data = {
    mainActiveIndex: 0,
    items: [],
    markers: [],
    points: [],
    currentEstate: {},
    estates: [],
    loc: {},
    cities: [],
    latitude: 23.2,
    longitude: 126.1,
    searchText: '',
    searched: [],
    showResultPanel: false,
  }
  computed = {}
  async initCurrent () {
    this.currentEstate = wepy.getStorageSync(CURRENT_ESTATE)
    if (this.currentEstate) {
      this.mainActiveIndex = this.cities.findIndex(item => this.currentEstate.cities[0] == item.id)
    } else {
      let that = this
      let res = await wepy.getSetting()
      if (!res.authSetting['scope.userLocation']) {
        await wepy.authorize({
          scope: 'scope.userLocation'
        })
      }
    }
    this.$apply()
  }
  async initGeoLocation () {
      let that = this
      let loc = await wepy.getLocation()
      console.log('location', loc)
      this.loc = loc
      let qqmapsdk = new QQMapWX({
        key: 'URJBZ-CURE3-IGC3F-3JD5V-M2AL5-ULBWX'
      })
      qqmapsdk.reverseGeocoder({
        location: {
          latitude: loc.latitude,
          longitude: loc.longitude
        },
        success: function (res2) {
          let city = res2.result.address_component.city
          let district = res2.result.address_component.district
          console.log('city', res2.result)
          that.mainActiveIndex = that.cities.findIndex(item => district == item.name || district == `${item.name}市`)
          if (that.mainActiveIndex < 0) {
            that.mainActiveIndex = that.cities.findIndex(item => city == item.name || city == `${item.name}市` )
          }
          if (that.mainActiveIndex < 0) {
            that.mainActiveIndex = 0
            wx.showToast({
              title: `未找到${city} ${district}，请手动选择`,
              icon: 'none',
              mask: false,
              duration: 3000
            });
            return
          }
          that.$apply()
          console.log('res3', res2.result, that.mainActiveIndex)
          // that.setData({mainActiveIndex: this.mainActiveIndex})
        },
        fail: function (err) {
          console.log('err', err)
        }
      })
  }
  async loadCities() {
    let json = await api.queryCities()
    if (json.statusCode !== 200) {
      console.log('获取城市失败');
      return;
    }
    this.cities = json.data
    await this.initGeoLocation()
  }
  async loadEstates(center) {
      let params = {}
      if (center) {
          const hash = geohash.encode(center.lat, center.lng, 6)
          console.log('geohash', hash, geohash.neighbors(hash))
          const hashes = [hash, ...geohash.neighbors(hash)]
          const query = {
              'filter[meta_query][relation]': 'OR'
          }
          for (let i = 0; i < hashes.length; ++i) {
            query[`filter[meta_query][${i}][key]`] = 'map_geohash'
            query[`filter[meta_query][${i}][value]`] = hashes[i]
            query[`filter[meta_query][${i}][compare]`] = 'like'
          }
          params = {
              query
         }
      }
      let json2 = await api.queryEstates(params)
      if (json2.statusCode !== 200)  {
          console.log('获取小区失败');
          return;
      }

      this.estates = json2.data;
      let items = this.estates.map(item2 => {
          if(item2.contact =='') {
              return {text: item2.title.rendered, id: item2.id,disabled: true}
          } else {
              return {text: item2.title.rendered, id: item2.id, disabled: false}
          }
      })
      this.items = items
      
      this.markers = [{
          id: 0,
          latitude: this.loc.latitude,
          longitude: this.loc.longitude,
          iconPath: '../images/icon_current_location.png',
          height: '16px'
      }]
      this.markers = [...this.markers, ...this.estates.filter(item => item.map).map((item, index) => ({
          id: item.id,
          latitude: item.map.latLng.lat,
          longitude: item.map.latLng.lng,
          label: {
              content: " " + (index + 1) + " ",
              bgColor: '#ff6a3c',
              color: '#fff',
              borderRadius: 12,
              anchorX: -20,
          },
          anchor: {x: .5, y:1}
      }))]
      // console.log('markers', this.markers)
      this.$apply()

  }
  async onLoad() {
    await this.loadCities()
    await this.initCurrent()
    // 有当前小区的，以当前小区为中心
    // 没有当前小区的，以当前位置为中心
    var center = null
    if (this.currentEstate && this.currentEstate.map) {
        const {lat, lng} = this.currentEstate.map.latLng
        center = {lat, lng}
        this.latitude = center.lat
        this.longitude = center.lng
    } else if (this.loc) {
        center = {lat: this.loc.latitude, lng: this.loc.longitude}
        this.latitude = center.lat
        this.longitude = center.lng
    }
    
    await this.loadEstates(center)
  }
  methods = {
    async onSelectCity() {
        const cities = this.cities.map(item => item.name)
        try {
            let res = await wepy.showActionSheet({
                itemList: cities
            })
            this.mainActiveIndex = res.tapIndex
            this.$apply()
        } catch (e) {
            // cancelled or other error
        }
    },
    async onSelectEstateZone(id) {
      // console.log("id", id, this.currentEstate)
        const currentEstate = this.estates.find(item => item.id == id) || this.searched.find(item => item.id === id)
      if (!currentEstate.contact) {
          tip.alert('该小区正在招募小区长');
          return;
      }
      this.currentEstate = currentEstate
      await api.updateMe({
          query: {
              estate: currentEstate.id
          }
      })
      wepy.setStorageSync(CURRENT_ESTATE, this.currentEstate)
      this.$apply()
      wepy.navigateBack()
    },
    onClickNav({ detail = {} }) {
      this.mainActiveIndex =  detail.index || 0

    },
    async onClickItem({ detail = {} }) {

      console.log('estate', detail.id, this.mainActiveIndex, this.estates)
      this.currentEstate = this.estates.find(item => item.id == detail.id)
      wepy.setStorageSync(CURRENT_ESTATE, this.currentEstate)
      // this.$emit('current-estate', this.currentEstate)
      wepy.navigateBack()
    },
      onRegionChange(e) {
          const that = this
          if (e.type == 'end') {
              const mapCtx = wepy.createMapContext("map");
              mapCtx.getCenterLocation({
                  success: (res) => {
                      console.log('new center2', res)
                      that.loc = res
                      that.latitude = res.latitude
                      that.longitude = res.longitude
                      that.$apply()
                      mapCtx.translateMarker({
                          markerId: 0,
                          destination: res
                      })
                      that.loadEstates({lat: res.latitude, lng: res.longitude})
                  }
              })
          }
      },
      onFocus() {
          this.showResultPanel = true
          this.$apply()
      },
      onCancel() {
          this.showResultPanel = false
          this.$apply()
      },
      async onChange(e) {
          console.log('e', e.detail)
          if (!e.detail) {
              this.showResultPanel = false
              this.$apply()
              return
          }
          const json = await api.queryEstates({
            query: {
                search: e.detail.value
            }
          })
          this.searched = json.data
          this.$apply()
          console.log("results:", json.data)
      },
  }
}
</script>
<style lang="less">
.estate-cell {
    .van-cell__title {
        flex:2;
        line-height: 40px;
    }
    .estate-cell__title {
        display:flex;
        height:100%;
    }
    .estate-cell__icon {
        display: flex;
        align-items: center;
        height:100%;
    }
    .van-cell__badge {
        color: white;
        background-color: #ff6a3c;
        border-radius: 32rpx;
        line-height:32rpx;
        height:32rpx;
        width:32rpx;
        text-align:center;
    }
}

.mask {
  background-color: rgba(0, 0, 0, .6);
  position: fixed;
  z-index: 2000;
  bottom: 0;
  right: 0;
  left: 0;
  top: 0;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -ms-flex-pack: center;
  justify-content: center;
  -webkit-box-align: center;
  -ms-flex-align: center;
  align-items: center;
}

</style>
