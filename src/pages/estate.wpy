<template>
    <view>
        <van-tree-select
          items="{{items}}"
          active-id="{{currentEstate.id}}"
          main-active-index="{{ mainActiveIndex }}"
          bind:click-nav="onClickNav"
          bind:click-item="onClickItem"
          />
    </view>
</template>
<script>
import wepy from 'wepy'
import {
  CURRENT_ESTATE,
} from '@/utils/constant';
import QQMapWX from 'qqmap-wx-jssdk';
import tip from '@/utils/tip'
import api from '@/api/api';

export default class Estate extends wepy.page {
  config = {
    navigationBarTitleText: '选择小区',
  }
  data = {
    mainActiveIndex: 0,
    items: [],
    currentEstate: {},
    estates: []
  }
  computed = {}
  async init () {
    let items = this.estates.map(item => {
      let children = item.items.map(item2 => ({text: item2.title.rendered, id: item2.id, disabled: false})) 
      return {text: item.name, disabled: false, children}
    })
    console.log('items', items)

    this.items = items
    this.currentEstate = wepy.getStorageSync(CURRENT_ESTATE);
    if (this.currentEstate) {
      this.mainActiveIndex = this.estates.findIndex(item => this.currentEstate.cities[0] == item.id)
    } else {
      let that = this
      let res = await wepy.getSetting()
      if (!res.authSetting['scope.userLocation']) {
        await wepy.authorize({
          scope: 'scope.userLocation'
        })
      }
      let loc = await wepy.getLocation()
      console.log('location', loc)

      let qqmapsdk = new QQMapWX({
        key: 'C5VBZ-XVRCX-H5F4H-T7WZ4-3RPYV-GTBRP'
      })
      qqmapsdk.reverseGeocoder({
        location: {
          latitude: loc.latitude,
          longitude: loc.longitude
        },
        success: function (res2) {
          let city = res2.result.address_component.city
          let district = res2.result.address_component.district
          that.mainActiveIndex = items.findIndex(item => district == item.text || district == `${item.text}市`)
          if (that.mainActiveIndex < 0) {
            that.mainActiveIndex = items.findIndex(item => city == item.text || city == `${item.text}市` )
          }
          if (that.mainActiveIndex < 0) {
            that.mainActiveIndex = 0
            wx.showToast({
              title: '未找到您所在城市，请手动选择',
              icon: 'none',
              mask: false,
              duration: 3000
            });
            return
          }
          that.$apply()
          console.log('res2', res2.result, that.mainActiveIndex)
          // that.setData({mainActiveIndex: this.mainActiveIndex})
        },
        fail: function (err) {
          console.log('err', err)
        }
      })
    }
    this.$apply()
  }
  async loadEstates() {
    let json = await api.queryCities()
    if (json.statusCode !== 200) {
      console.log('获取城市失败');
      return;
    }
    let json2 = await api.queryEstates({})
    if (json2.statusCode !== 200)  {
      console.log('获取小区失败');
      return;
    }

    let estates = []
    json.data.map((item, key) => {
      let subCollection = json2.data.filter(item2 => {
        return item2.cities.includes(item.id)
      })
      subCollection.map((item3, key) => subCollection[key].city = item.name)
      json.data[key].items = subCollection;
    })

    // wepy.setStorageSync(ESTATES, json.data);
    this.estates = json.data;
    this.$apply()
    // console.log("cities", this.estates);
  }
  async onLoad() {
    await this.loadEstates()
    await this.init()
  }
  methods = {
    onClickNav({ detail = {} }) {
      this.mainActiveIndex =  detail.index || 0
    },    
    onClickItem({ detail = {} }) {

      console.log('estate', detail.id, this.mainActiveIndex, this.estates)
      this.currentEstate = this.estates[this.mainActiveIndex].items.find(item => item.id == detail.id)
      wepy.setStorageSync(CURRENT_ESTATE, this.currentEstate)
      // this.$emit('current-estate', this.currentEstate)
      wepy.navigateBack()
    }
  }
}
</script>
<style lang="less">

</style>
