<template>
   <view>
        <repeat for="{{stores}}" key="index" index="index" item="store">
            <navigator class="store-card" url="/pages/store_detail?id={{store.id}}">
                <view class="store-card__avatar">
                    <image src="{{store['_embedded']['wp:featuredmedia'][0].source_url || 'https://pet.papamk.com/app/uploads/2019/06/宠物图标ok.png'}}"></image>
                </view>
                <view class="store-card__content">
                    <view class="store-card__title font-second-title">
                        {{store.title.rendered}}
                    </view>
                    <view class="store-card__tags">
                        <van-tag wx:for="{{tags[index]}}" type="primary" plain style="margin-right:8rpx;">
                            {{item}}
                        </van-tag>
                    </view>
                    <view class="store-card__bottom">
                        <view class="store-card__address text-default">
                            {{store.address}}
                        </view>
                    </view>
                </view>
            </navigator>
        </repeat>
      <!--加载更多时动画-->
      <bottomLoadMore :show.sync="showLoading" message="正在加载"></bottomLoadMore>
      <!--暂无数据显示-->
      <placeholder :show.sync="isEmpty" message="暂无发现数据"></placeholder>
   </view>
</template>
<script>
import wepy from 'wepy'
import api from '@/api/api'
import tip from '@/utils/tip'
import BottomLoadMore from "../components/common/bottomLoadMore"
import Placeholder from "../components/common/placeholder"

export default class StoreList extends wepy.page {
  config = {
    navigationBarTitleText: '商家名录',
  }
  components = {
      bottomLoadMore: BottomLoadMore,
      placeholder: Placeholder
  }
  data = {
    stores: [],
    showLoading: false,
    isEmpty: false,
    currentPage: 1,
    totalPage: 1,
  }
  computed = {
      tags () {
          const tags = []
          this.stores.map((s, index) => {
            const terms = s['_embedded'] && s['_embedded']['wp:term']
            tags[index] = ''
            if (terms) {
                tags[index] = terms[0].map(item => item.name)
            }
            // console.log('terms', index, terms, tags[index])
          })
          return tags
      }
  }
  async queryStores(page = 1) {
      try {
        this.showLoading = true
        const res = await api.query('store', {
            query: {
                page,
                _embed: true
            }
        })
        this.stores = [...this.stores, ...res.data]
        this.currentPage = page
        this.totalPage = res.header['X-WP-TotalPages'];
      } catch (e) {
          console.log('e', e)
      }
      this.showLoading = false
      if (this.stores.length === 0) {
          this.isEmpty = true
      }
      this.$apply()
  }
  onLoad() {
    this.queryStores()       
  }
  async onReachBottom () {
    if (this.currentPage >= this.totalPage)
        return
    if (this.showLoading)
        return
    await this.queryStores(this.currentPage + 1)
  }
}

</script>
<style lang="less">
.store-card {
    display: flex;
    flex-direction: row;
    background-color: white;
    margin: 8rpx 16rpx;
}

.store-card__avatar {
    display: flex;
    flex: 6;
    box-sizing: border-box;
    padding: 16rpx;

    image {
        width: 160rpx;
        height: 160rpx;
    }
}

.store-card__content {
    display: flex;
    flex-direction: column;
    flex: 18;
    justify-content: space-between;
    box-sizing: border-box;
    padding: 16rpx;
}
</style>
